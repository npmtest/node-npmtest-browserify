{"/home/travis/build/npmtest/node-npmtest-browserify/test.js":"/* istanbul instrument in package npmtest_browserify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-browserify/lib.npmtest_browserify.js":"/* istanbul instrument in package npmtest_browserify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_browserify = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_browserify = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-browserify/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-browserify && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_browserify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_browserify\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_browserify.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_browserify.rollup.js'] =\n            local.assetsDict['/assets.npmtest_browserify.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_browserify.__dirname +\n                    '/lib.npmtest_browserify.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-browserify/browserify/index.js":"var mdeps = require('module-deps');\nvar depsSort = require('deps-sort');\nvar bpack = require('browser-pack');\nvar insertGlobals = require('insert-module-globals');\nvar syntaxError = require('syntax-error');\n\nvar builtins = require('./lib/builtins.js');\n\nvar splicer = require('labeled-stream-splicer');\nvar through = require('through2');\nvar concat = require('concat-stream');\n\nvar inherits = require('inherits');\nvar EventEmitter = require('events').EventEmitter;\nvar xtend = require('xtend');\nvar isArray = Array.isArray;\nvar defined = require('defined');\nvar has = require('has');\nvar sanitize = require('htmlescape').sanitize;\nvar shasum = require('shasum');\n\nvar bresolve = require('browser-resolve');\nvar resolve = require('resolve');\n\nvar readonly = require('read-only-stream');\n\nmodule.exports = Browserify;\ninherits(Browserify, EventEmitter);\n\nvar fs = require('fs');\nvar path = require('path');\nvar relativePath = require('cached-path-relative')\nvar paths = {\n    empty: path.join(__dirname, 'lib/_empty.js')\n};\n\nfunction Browserify (files, opts) {\n    var self = this;\n    if (!(this instanceof Browserify)) return new Browserify(files, opts);\n    if (!opts) opts = {};\n    \n    if (typeof files === 'string' || isArray(files) || isStream(files)) {\n        opts = xtend(opts, { entries: [].concat(opts.entries || [], files) });\n    }\n    else opts = xtend(files, opts);\n    \n    self._options = opts;\n    if (opts.noparse) opts.noParse = opts.noparse;\n    \n    if (opts.basedir !== undefined && typeof opts.basedir !== 'string') {\n        throw new Error('opts.basedir must be either undefined or a string.');\n    }\n\n    opts.dedupe = opts.dedupe === false ? false : true;\n\n    self._external = [];\n    self._exclude = [];\n    self._ignore = [];\n    self._expose = {};\n    self._hashes = {};\n    self._pending = 0;\n    self._transformOrder = 0;\n    self._transformPending = 0;\n    self._transforms = [];\n    self._entryOrder = 0;\n    self._ticked = false;\n    self._bresolve = opts.browserField === false\n        ? function (id, opts, cb) {\n            if (!opts.basedir) opts.basedir = path.dirname(opts.filename)\n            resolve(id, opts, cb)\n        }\n        : bresolve\n    ;\n    self._syntaxCache = {};\n\n    var ignoreTransform = [].concat(opts.ignoreTransform).filter(Boolean);\n    self._filterTransform = function (tr) {\n        if (isArray(tr)) {\n            return ignoreTransform.indexOf(tr[0]) === -1;\n        }\n        return ignoreTransform.indexOf(tr) === -1;\n    };\n\n    self.pipeline = self._createPipeline(opts);\n    \n    [].concat(opts.transform).filter(Boolean).filter(self._filterTransform)\n    .forEach(function (tr) {\n        self.transform(tr);\n    });\n    \n    [].concat(opts.entries).filter(Boolean).forEach(function (file) {\n        self.add(file, { basedir: opts.basedir });\n    });\n    \n    [].concat(opts.require).filter(Boolean).forEach(function (file) {\n        self.require(file, { basedir: opts.basedir });\n    });\n    \n    [].concat(opts.plugin).filter(Boolean).forEach(function (p) {\n        self.plugin(p, { basedir: opts.basedir });\n    });\n}\n\nBrowserify.prototype.require = function (file, opts) {\n    var self = this;\n    if (isArray(file)) {\n        file.forEach(function (x) {\n            if (typeof x === 'object') {\n                self.require(x.file, xtend(opts, x));\n            }\n            else self.require(x, opts);\n        });\n        return this;\n    }\n    \n    if (!opts) opts = {};\n    var basedir = defined(opts.basedir, self._options.basedir, process.cwd());\n    var expose = opts.expose;\n    if (file === expose && /^[\\.]/.test(expose)) {\n        expose = '/' + relativePath(basedir, expose);\n        expose = expose.replace(/\\\\/g, '/');\n    }\n    if (expose === undefined && this._options.exposeAll) {\n        expose = true;\n    }\n    if (expose === true) {\n        expose = '/' + relativePath(basedir, file);\n        expose = expose.replace(/\\\\/g, '/');\n    }\n    \n    if (isStream(file)) {\n        self._pending ++;\n        var order = self._entryOrder ++;\n        file.pipe(concat(function (buf) {\n            var filename = opts.file || file.file || path.join(\n                basedir,\n                '_stream_' + order + '.js'\n            );\n            var id = file.id || expose || filename;\n            if (expose || opts.entry === false) {\n                self._expose[id] = filename;\n            }\n            if (!opts.entry && self._options.exports === undefined) {\n                self._bpack.hasExports = true;\n            }\n            var rec = {\n                source: buf.toString('utf8'),\n                entry: defined(opts.entry, false),\n                file: filename,\n                id: id\n            };\n            if (rec.entry) rec.order = order;\n            if (rec.transform === false) rec.transform = false;\n            self.pipeline.write(rec);\n            \n            if (-- self._pending === 0) self.emit('_ready');\n        }));\n        return this;\n    }\n    \n    var row;\n    if (typeof file === 'object') {\n        row = xtend(file, opts);\n    }\n    else if (!opts.entry && isExternalModule(file)) {\n        // external module or builtin\n        row = xtend(opts, { id: expose || file, file: file });\n    }\n    else {\n        row = xtend(opts, { file: path.resolve(basedir, file) });\n    }\n    \n    if (!row.id) {\n        row.id = expose || row.file;\n    }\n    if (expose || !row.entry) {\n        // Make this available to mdeps so that it can assign the value when it\n        // resolves the pathname.\n        row.expose = row.id;\n    }\n    \n    if (opts.external) return self.external(file, opts);\n    if (row.entry === undefined) row.entry = false;\n    \n    if (!row.entry && self._options.exports === undefined) {\n        self._bpack.hasExports = true;\n    }\n    \n    if (row.entry) row.order = self._entryOrder ++;\n    \n    if (opts.transform === false) row.transform = false;\n    self.pipeline.write(row);\n    return self;\n};\n\nBrowserify.prototype.add = function (file, opts) {\n    var self = this;\n    if (!opts) opts = {};\n    if (isArray(file)) {\n        file.forEach(function (x) { self.add(x, opts) });\n        return this;\n    }\n    return this.require(file, xtend({ entry: true, expose: false }, opts));\n};\n\nBrowserify.prototype.external = function (file, opts) {\n    var self = this;\n    if (isArray(file)) {\n        file.forEach(function (f) {\n            if (typeof f === 'object') {\n                self.external(f, xtend(opts, f));\n            }\n            else self.external(f, opts)\n        });\n        return this;\n    }\n    if (file && typeof file === 'object' && typeof file.bundle === 'function') {\n        var b = file;\n        self._pending ++;\n\n        var bdeps = {};\n        var blabels = {};\n\n        b.on('label', function (prev, id) {\n            self._external.push(id);\n\n            if (prev !== id) {\n                blabels[prev] = id;\n                self._external.push(prev);\n            }\n        });\n\n        b.pipeline.get('deps').push(through.obj(function (row, enc, next) {\n            bdeps = xtend(bdeps, row.deps);\n            this.push(row);\n            next();\n        }));\n\n        self.on('dep', function (row) {\n            Object.keys(row.deps).forEach(function (key) {\n                var prev = bdeps[key];\n                if (prev) {\n                    var id = blabels[prev];\n                    if (id) {\n                        row.indexDeps[key] = id;\n                    }\n                }\n            });\n        });\n\n        b.pipeline.get('label').once('end', function () {\n            if (-- self._pending === 0) self.emit('_ready');\n        });\n        return this;\n    }\n    \n    if (!opts) opts = {};\n    var basedir = defined(opts.basedir, process.cwd());\n    this._external.push(file);\n    this._external.push('/' + relativePath(basedir, file));\n    return this;\n};\n\nBrowserify.prototype.exclude = function (file, opts) {\n    if (!opts) opts = {};\n    var basedir = defined(opts.basedir, process.cwd());\n    this._exclude.push(file);\n    this._exclude.push('/' + relativePath(basedir, file));\n    return this;\n};\n\nBrowserify.prototype.ignore = function (file, opts) {\n    if (!opts) opts = {};\n    var basedir = defined(opts.basedir, process.cwd());\n\n    // Handle relative paths\n    if (file[0] === '.') {\n        this._ignore.push(path.resolve(basedir, file));\n    }\n    else {\n        this._ignore.push(file);\n    }\n    return this;\n};\n\nBrowserify.prototype.transform = function (tr, opts) {\n    var self = this;\n    if (typeof opts === 'function' || typeof opts === 'string') {\n        tr = [ opts, tr ];\n    }\n    if (isArray(tr)) {\n        opts = tr[1];\n        tr = tr[0];\n    }\n    \n    //if the bundler is ignoring this transform\n    if (typeof tr === 'string' && !self._filterTransform(tr)) {\n        return this;\n    }\n\n    function resolved () {\n      self._transforms[order] = rec;\n      -- self._pending;\n      if (-- self._transformPending === 0) {\n          self._transforms.forEach(function (transform) {\n            self.pipeline.write(transform);\n          });\n\n          if (self._pending === 0) {\n            self.emit('_ready');\n          }\n      }\n    }\n    \n    if (!opts) opts = {};\n    opts._flags = '_flags' in opts ? opts._flags : self._options;\n    \n    var basedir = defined(opts.basedir, this._options.basedir, process.cwd());\n    var order = self._transformOrder ++;\n    self._pending ++;\n    self._transformPending ++;\n\n    var rec = {\n        transform: tr,\n        options: opts,\n        global: opts.global\n    };\n\n    if (typeof tr === 'string') {\n        var topts = {\n            basedir: basedir,\n            paths: (self._options.paths || []).map(function (p) {\n                return path.resolve(basedir, p);\n            })\n        };\n        resolve(tr, topts, function (err, res) {\n            if (err) return self.emit('error', err);\n            rec.transform = res;\n            resolved();\n        });\n    }\n    else process.nextTick(resolved);\n    return this;\n};\n\nBrowserify.prototype.plugin = function (p, opts) {\n    if (isArray(p)) {\n        opts = p[1];\n        p = p[0];\n    }\n    if (!opts) opts = {};\n    var basedir = defined(opts.basedir, this._options.basedir, process.cwd());\n    if (typeof p === 'function') {\n        p(this, opts);\n    }\n    else {\n        var pfile = resolve.sync(String(p), { basedir: basedir })\n        var f = require(pfile);\n        if (typeof f !== 'function') {\n            throw new Error('plugin ' + p + ' should export a function');\n        }\n        f(this, opts);\n    }\n    return this;\n};\n\nBrowserify.prototype._createPipeline = function (opts) {\n    var self = this;\n    if (!opts) opts = {};\n    this._mdeps = this._createDeps(opts);\n    this._mdeps.on('file', function (file, id) {\n        pipeline.emit('file', file, id);\n        self.emit('file', file, id);\n    });\n    this._mdeps.on('package', function (pkg) {\n        pipeline.emit('package', pkg);\n        self.emit('package', pkg);\n    });\n    this._mdeps.on('transform', function (tr, file) {\n        pipeline.emit('transform', tr, file);\n        self.emit('transform', tr, file);\n    });\n    \n    var dopts = {\n        index: !opts.fullPaths && !opts.exposeAll,\n        dedupe: opts.dedupe,\n        expose: this._expose\n    };\n    this._bpack = bpack(xtend(opts, { raw: true }));\n    \n    var pipeline = splicer.obj([\n        'record', [ this._recorder() ],\n        'deps', [ this._mdeps ],\n        'json', [ this._json() ],\n        'unbom', [ this._unbom() ],\n        'unshebang', [ this._unshebang() ],\n        'syntax', [ this._syntax() ],\n        'sort', [ depsSort(dopts) ],\n        'dedupe', [ this._dedupe() ],\n        'label', [ this._label(opts) ],\n        'emit-deps', [ this._emitDeps() ],\n        'debug', [ this._debug(opts) ],\n        'pack', [ this._bpack ],\n        'wrap', []\n    ]);\n    if (opts.exposeAll) {\n        var basedir = defined(opts.basedir, process.cwd());\n        pipeline.get('deps').push(through.obj(function (row, enc, next) {\n            if (self._external.indexOf(row.id) >= 0) return next();\n            if (self._external.indexOf(row.file) >= 0) return next();\n            \n            if (isAbsolutePath(row.id)) {\n                row.id = '/' + relativePath(basedir, row.file);\n            }\n            Object.keys(row.deps || {}).forEach(function (key) {\n                row.deps[key] = '/' + relativePath(basedir, row.deps[key]);\n            });\n            this.push(row);\n            next();\n        }));\n    }\n    return pipeline;\n};\n\nBrowserify.prototype._createDeps = function (opts) {\n    var self = this;\n    var mopts = xtend(opts);\n    var basedir = defined(opts.basedir, process.cwd());\n\n    // Let mdeps populate these values since it will be resolving file paths\n    // anyway.\n    mopts.expose = this._expose;\n    mopts.extensions = [ '.js', '.json' ].concat(mopts.extensions || []);\n    self._extensions = mopts.extensions;\n\n    mopts.transform = [];\n    mopts.transformKey = defined(opts.transformKey, [ 'browserify', 'transform' ]);\n    mopts.postFilter = function (id, file, pkg) {\n        if (opts.postFilter && !opts.postFilter(id, file, pkg)) return false;\n        if (self._external.indexOf(file) >= 0) return false;\n        if (self._exclude.indexOf(file) >= 0) return false;\n\n        //filter transforms on module dependencies\n        if (pkg && pkg.browserify && pkg.browserify.transform) {\n            //In edge cases it may be a string\n            pkg.browserify.transform = [].concat(pkg.browserify.transform)\n                    .filter(Boolean)\n                    .filter(self._filterTransform);\n        }\n        return true;\n    };\n    mopts.filter = function (id) {\n        if (opts.filter && !opts.filter(id)) return false;\n        if (self._external.indexOf(id) >= 0) return false;\n        if (self._exclude.indexOf(id) >= 0) return false;\n        if (opts.bundleExternal === false && isExternalModule(id)) {\n            return false;\n        }\n        return true;\n    };\n    mopts.resolve = function (id, parent, cb) {\n        if (self._ignore.indexOf(id) >= 0) return cb(null, paths.empty, {});\n        \n        self._bresolve(id, parent, function (err, file, pkg) {\n            if (file && self._ignore.indexOf(file) >= 0) {\n                return cb(null, paths.empty, {});\n            }\n            if (file && self._ignore.length) {\n                var nm = file.split('/node_modules/')[1];\n                if (nm) {\n                    nm = nm.split('/')[0];\n                    if (self._ignore.indexOf(nm) >= 0) {\n                        return cb(null, paths.empty, {});\n                    }\n                }\n            }\n            \n            if (file) {\n                var ex = '/' + relativePath(basedir, file);\n                if (self._external.indexOf(ex) >= 0) {\n                    return cb(null, ex);\n                }\n                if (self._exclude.indexOf(ex) >= 0) {\n                    return cb(null, ex);\n                }\n                if (self._ignore.indexOf(ex) >= 0) {\n                    return cb(null, paths.empty, {});\n                }\n            }\n            if (err) cb(err, file, pkg)\n            else if (file) fs.realpath(file, function (err, res) {\n                cb(err, res, pkg, file);\n            });\n            else cb(err, null, pkg)\n        });\n    };\n    \n    if (opts.builtins === false) {\n        mopts.modules = {};\n        self._exclude.push.apply(self._exclude, Object.keys(builtins));\n    }\n    else if (opts.builtins && isArray(opts.builtins)) {\n        mopts.modules = {};\n        opts.builtins.forEach(function (key) {\n            mopts.modules[key] = builtins[key];\n        });\n    }\n    else if (opts.builtins && typeof opts.builtins === 'object') {\n        mopts.modules = opts.builtins;\n    }\n    else mopts.modules = xtend(builtins);\n    \n    Object.keys(builtins).forEach(function (key) {\n        if (!has(mopts.modules, key)) self._exclude.push(key);\n    });\n    \n    mopts.globalTransform = [];\n    if (!this._bundled) {\n        this.once('bundle', function () {\n            self.pipeline.write({\n                transform: globalTr,\n                global: true,\n                options: {}\n            });\n        });\n    }\n    \n    var no = [].concat(opts.noParse).filter(Boolean);\n    var absno = no.filter(function(x) {\n        return typeof x === 'string';\n    }).map(function (x) {\n        return path.resolve(basedir, x);\n    });\n    \n    function globalTr (file) {\n        if (opts.detectGlobals === false) return through();\n        \n        if (opts.noParse === true) return through();\n        if (no.indexOf(file) >= 0) return through();\n        if (absno.indexOf(file) >= 0) return through();\n        \n        var parts = file.split('/node_modules/');\n        for (var i = 0; i < no.length; i++) {\n            if (typeof no[i] === 'function' && no[i](file)) {\n                return through();\n            }\n            else if (no[i] === parts[parts.length-1].split('/')[0]) {\n                return through();\n            }\n            else if (no[i] === parts[parts.length-1]) {\n                return through();\n            }\n        }\n        \n        var vars = xtend({\n            process: function () { return \"require('_process')\" },\n        }, opts.insertGlobalVars);\n        \n        if (opts.bundleExternal === false) {\n            vars.process = undefined;\n            vars.buffer = undefined;\n        }\n        \n        return insertGlobals(file, xtend(opts, {\n            debug: opts.debug,\n            always: opts.insertGlobals,\n            basedir: opts.commondir === false\n                ? '/'\n                : opts.basedir || process.cwd()\n            ,\n            vars: vars\n        }));\n    }\n    return mdeps(mopts);\n};\n\nBrowserify.prototype._recorder = function (opts) {\n    var self = this;\n    var ended = false;\n    this._recorded = [];\n    \n    if (!this._ticked) {\n        process.nextTick(function () {\n            self._ticked = true;\n            self._recorded.forEach(function (row) {\n                stream.push(row);\n            });\n            if (ended) stream.push(null);\n        });\n    }\n    \n    var stream = through.obj(write, end);\n    return stream;\n    \n    function write (row, enc, next) {\n        self._recorded.push(row);\n        if (self._ticked) this.push(row);\n        next();\n    }\n    function end () {\n        ended = true;\n        if (self._ticked) this.push(null);\n    }\n};\n\nBrowserify.prototype._json = function () {\n    return through.obj(function (row, enc, next) {\n        if (/\\.json$/.test(row.file)) {\n            row.source = 'module.exports=' + sanitize(row.source);\n        }\n        this.push(row);\n        next();\n    });\n};\n\nBrowserify.prototype._unbom = function () {\n    return through.obj(function (row, enc, next) {\n        if (/^\\ufeff/.test(row.source)) {\n            row.source = row.source.replace(/^\\ufeff/, '');\n        }\n        this.push(row);\n        next();\n    });\n};\n\nBrowserify.prototype._unshebang = function () {\n    return through.obj(function (row, enc, next) {\n        if (/^#!/.test(row.source)) {\n            row.source = row.source.replace(/^#![^\\n]*\\n/, '');\n        }\n        this.push(row);\n        next();\n    });\n};\n\nBrowserify.prototype._syntax = function () {\n    var self = this;\n    return through.obj(function (row, enc, next) {\n        var h = shasum(row.source);\n        if (typeof self._syntaxCache[h] === 'undefined') {\n            var err = syntaxError(row.source, row.file || row.id);\n            if (err) return this.emit('error', err);\n            self._syntaxCache[h] = true;\n        }\n        this.push(row);\n        next();\n    });\n};\n\nBrowserify.prototype._dedupe = function () {\n    return through.obj(function (row, enc, next) {\n        if (!row.dedupeIndex && row.dedupe) {\n            row.source = 'arguments[4]['\n                + JSON.stringify(row.dedupe)\n                + '][0].apply(exports,arguments)'\n            ;\n            row.nomap = true;\n        }\n        else if (row.dedupeIndex) {\n            row.source = 'arguments[4]['\n                + JSON.stringify(row.dedupeIndex)\n                + '][0].apply(exports,arguments)'\n            ;\n            row.nomap = true;\n        }\n        if (row.dedupeIndex && row.indexDeps) {\n            row.indexDeps.dup = row.dedupeIndex;\n        }\n        this.push(row);\n        next();\n    });\n};\n\nBrowserify.prototype._label = function (opts) {\n    var self = this;\n    var basedir = defined(opts.basedir, process.cwd());\n    \n    return through.obj(function (row, enc, next) {\n        var prev = row.id;\n\n        if (self._external.indexOf(row.id) >= 0) return next();\n        if (self._external.indexOf('/' + relativePath(basedir, row.id)) >= 0) {\n            return next();\n        }\n        if (self._external.indexOf(row.file) >= 0) return next();\n        \n        if (row.index) row.id = row.index;\n        \n        self.emit('label', prev, row.id);\n        if (row.indexDeps) row.deps = row.indexDeps || {};\n        \n        Object.keys(row.deps).forEach(function (key) {\n            if (self._expose[key]) {\n                row.deps[key] = key;\n                return;\n            }\n\n            var afile = path.resolve(path.dirname(row.file), key);\n            var rfile = '/' + relativePath(basedir, afile);\n            if (self._external.indexOf(rfile) >= 0) {\n                row.deps[key] = rfile;\n            }\n            if (self._external.indexOf(afile) >= 0) {\n                row.deps[key] = rfile;\n            }\n            if (self._external.indexOf(key) >= 0) {\n                row.deps[key] = key;\n                return;\n            }\n            \n            for (var i = 0; i < self._extensions.length; i++) {\n                var ex = self._extensions[i];\n                if (self._external.indexOf(rfile + ex) >= 0) {\n                    row.deps[key] = rfile + ex;\n                    break;\n                }\n            }\n        });\n        \n        if (row.entry || row.expose) {\n            self._bpack.standaloneModule = row.id;\n        }\n        this.push(row);\n        next();\n    });\n};\n\nBrowserify.prototype._emitDeps = function () {\n    var self = this;\n    return through.obj(function (row, enc, next) {\n        self.emit('dep', row);\n        this.push(row);\n        next();\n    })\n};\n\nBrowserify.prototype._debug = function (opts) {\n    var basedir = defined(opts.basedir, process.cwd());\n    return through.obj(function (row, enc, next) {\n        if (opts.debug) {\n            row.sourceRoot = 'file://localhost';\n            row.sourceFile = relativePath(basedir, row.file)\n                .replace(/\\\\/g, '/');\n        }\n        this.push(row);\n        next();\n    });\n};\n\nBrowserify.prototype.reset = function (opts) {\n    if (!opts) opts = {};\n    var hadExports = this._bpack.hasExports;\n    this.pipeline = this._createPipeline(xtend(opts, this._options));\n    this._bpack.hasExports = hadExports;\n    this._entryOrder = 0;\n    this._bundled = false;\n    this.emit('reset');\n};\n\nBrowserify.prototype.bundle = function (cb) {\n    var self = this;\n    if (cb && typeof cb === 'object') {\n        throw new Error(\n            'bundle() no longer accepts option arguments.\\n'\n            + 'Move all option arguments to the browserify() constructor.'\n        );\n    }\n    if (this._bundled) {\n        var recorded = this._recorded;\n        this.reset();\n        recorded.forEach(function (x) {\n            self.pipeline.write(x);\n        });\n    }\n    var output = readonly(this.pipeline);\n    if (cb) {\n        output.on('error', cb);\n        output.pipe(concat(function (body) {\n            cb(null, body);\n        }));\n    }\n\n    function ready () {\n        self.emit('bundle', output);\n        self.pipeline.end();\n    }\n\n    if (this._pending === 0) ready();\n    else this.once('_ready', ready);\n\n    this._bundled = true;\n    return output;\n};\n\nfunction isStream (s) { return s && typeof s.pipe === 'function' }\nfunction isAbsolutePath (file) {\n    var regexp = process.platform === 'win32' ?\n        /^\\w:/ :\n        /^\\//;\n    return regexp.test(file);\n}\nfunction isExternalModule (file) {\n    var regexp = process.platform === 'win32' ?\n        /^(\\.|\\w:)/ :\n        /^[\\/.]/;\n    return !regexp.test(file);\n}\n","/home/travis/build/npmtest/node-npmtest-browserify/browserify/lib/builtins.js":"exports.assert = require.resolve('assert/');\nexports.buffer = require.resolve('buffer/');\nexports.child_process = require.resolve('./_empty.js');\nexports.cluster = require.resolve('./_empty.js');\nexports.console = require.resolve('console-browserify');\nexports.constants = require.resolve('constants-browserify');\nexports.crypto = require.resolve('crypto-browserify');\nexports.dgram = require.resolve('./_empty.js');\nexports.dns = require.resolve('./_empty.js');\nexports.domain = require.resolve('domain-browser');\nexports.events = require.resolve('events/');\nexports.fs = require.resolve('./_empty.js');\nexports.http = require.resolve('stream-http');\nexports.https = require.resolve('https-browserify');\nexports.module = require.resolve('./_empty.js');\nexports.net = require.resolve('./_empty.js');\nexports.os = require.resolve('os-browserify/browser.js');\nexports.path = require.resolve('path-browserify');\nexports.punycode = require.resolve('punycode/');\nexports.querystring = require.resolve('querystring-es3/');\nexports.readline = require.resolve('./_empty.js');\nexports.repl = require.resolve('./_empty.js');\nexports.stream = require.resolve('stream-browserify');\nexports._stream_duplex = require.resolve('readable-stream/duplex.js');\nexports._stream_passthrough = require.resolve('readable-stream/passthrough.js');\nexports._stream_readable = require.resolve('readable-stream/readable.js');\nexports._stream_transform = require.resolve('readable-stream/transform.js');\nexports._stream_writable = require.resolve('readable-stream/writable.js');\nexports.string_decoder = require.resolve('string_decoder/');\nexports.sys = require.resolve('util/util.js');\nexports.timers = require.resolve('timers-browserify');\nexports.tls = require.resolve('./_empty.js');\nexports.tty = require.resolve('tty-browserify');\nexports.url = require.resolve('url/');\nexports.util = require.resolve('util/util.js');\nexports.vm = require.resolve('vm-browserify');\nexports.zlib = require.resolve('browserify-zlib');\nexports._process = require.resolve('process/browser');\n"}